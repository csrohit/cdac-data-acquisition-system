
Stm32f407_interfcing_with_i2c_lcd_dispaly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001794  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001964  08001964  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001964  08001964  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001964  08001964  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001964  08001964  00011964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800196c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000074  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006eb3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001286  00000000  00000000  00026eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00028178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  00028868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f4f4  00000000  00000000  00028ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c50  00000000  00000000  000483bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be90b  00000000  00000000  0005100c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010f917  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b50  00000000  00000000  0010f968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001904 	.word	0x08001904

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001904 	.word	0x08001904

080001c8 <GPIO_Config>:

/********************* Private function for I2C initialization *************************/

/* Configure GPIOs */
static void GPIO_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
	//Enable Ports clocks
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80001ce:	2300      	movs	r3, #0
 80001d0:	60bb      	str	r3, [r7, #8]
 80001d2:	4b20      	ldr	r3, [pc, #128]	; (8000254 <GPIO_Config+0x8c>)
 80001d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d6:	4a1f      	ldr	r2, [pc, #124]	; (8000254 <GPIO_Config+0x8c>)
 80001d8:	f043 0308 	orr.w	r3, r3, #8
 80001dc:	6313      	str	r3, [r2, #48]	; 0x30
 80001de:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <GPIO_Config+0x8c>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e2:	f003 0308 	and.w	r3, r3, #8
 80001e6:	60bb      	str	r3, [r7, #8]
 80001e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <GPIO_Config+0x8c>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f2:	4a18      	ldr	r2, [pc, #96]	; (8000254 <GPIO_Config+0x8c>)
 80001f4:	f043 0302 	orr.w	r3, r3, #2
 80001f8:	6313      	str	r3, [r2, #48]	; 0x30
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <GPIO_Config+0x8c>)
 80001fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	607b      	str	r3, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]

	//Init tyoeDef
	GPIO_InitTypeDef myPinInit;

	//I2C pins config
	myPinInit.Pin = GPIO_PIN_6 |GPIO_PIN_7;
 8000206:	23c0      	movs	r3, #192	; 0xc0
 8000208:	60fb      	str	r3, [r7, #12]
	myPinInit.Mode = GPIO_MODE_AF_OD;
 800020a:	2312      	movs	r3, #18
 800020c:	613b      	str	r3, [r7, #16]
	myPinInit.Pull = GPIO_PULLUP;
 800020e:	2301      	movs	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
	myPinInit.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000212:	2303      	movs	r3, #3
 8000214:	61bb      	str	r3, [r7, #24]
	myPinInit.Alternate = GPIO_AF4_I2C1;
 8000216:	2304      	movs	r3, #4
 8000218:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &myPinInit);
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	4619      	mov	r1, r3
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <GPIO_Config+0x90>)
 8000222:	f000 fc15 	bl	8000a50 <HAL_GPIO_Init>

	//Systick interrupt enable for HAL_Delay function
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000226:	f001 fb29 	bl	800187c <HAL_RCC_GetHCLKFreq>
 800022a:	4603      	mov	r3, r0
 800022c:	4a0b      	ldr	r2, [pc, #44]	; (800025c <GPIO_Config+0x94>)
 800022e:	fba2 2303 	umull	r2, r3, r2, r3
 8000232:	099b      	lsrs	r3, r3, #6
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fbd4 	bl	80009e2 <HAL_SYSTICK_Config>
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800023a:	2004      	movs	r0, #4
 800023c:	f000 fbde 	bl	80009fc <HAL_SYSTICK_CLKSourceConfig>
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2100      	movs	r1, #0
 8000244:	f04f 30ff 	mov.w	r0, #4294967295
 8000248:	f000 fbaf 	bl	80009aa <HAL_NVIC_SetPriority>

}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40023800 	.word	0x40023800
 8000258:	40020400 	.word	0x40020400
 800025c:	10624dd3 	.word	0x10624dd3

08000260 <I2C_Config>:


/*Configure I2C Peripheral */
static void I2C_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
	//Enable I2C peripheral clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <I2C_Config+0x68>)
 800026c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800026e:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <I2C_Config+0x68>)
 8000270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000274:	6413      	str	r3, [r2, #64]	; 0x40
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <I2C_Config+0x68>)
 8000278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]

	myI2Chandle.Instance = I2C1;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <I2C_Config+0x6c>)
 8000284:	4a12      	ldr	r2, [pc, #72]	; (80002d0 <I2C_Config+0x70>)
 8000286:	601a      	str	r2, [r3, #0]
	myI2Chandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <I2C_Config+0x6c>)
 800028a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800028e:	611a      	str	r2, [r3, #16]
	myI2Chandle.Init.ClockSpeed = 100000;
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <I2C_Config+0x6c>)
 8000292:	4a10      	ldr	r2, [pc, #64]	; (80002d4 <I2C_Config+0x74>)
 8000294:	605a      	str	r2, [r3, #4]
	myI2Chandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <I2C_Config+0x6c>)
 8000298:	2200      	movs	r2, #0
 800029a:	615a      	str	r2, [r3, #20]
	myI2Chandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <I2C_Config+0x6c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
	myI2Chandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <I2C_Config+0x6c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	61da      	str	r2, [r3, #28]
	myI2Chandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <I2C_Config+0x6c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	621a      	str	r2, [r3, #32]
	myI2Chandle.Init.OwnAddress1 = 0;
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <I2C_Config+0x6c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	60da      	str	r2, [r3, #12]
	myI2Chandle.Init.OwnAddress2 = 0;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <I2C_Config+0x6c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	619a      	str	r2, [r3, #24]
	HAL_I2C_Init(&myI2Chandle);
 80002ba:	4804      	ldr	r0, [pc, #16]	; (80002cc <I2C_Config+0x6c>)
 80002bc:	f000 fd64 	bl	8000d88 <HAL_I2C_Init>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40023800 	.word	0x40023800
 80002cc:	20000028 	.word	0x20000028
 80002d0:	40005400 	.word	0x40005400
 80002d4:	000186a0 	.word	0x000186a0

080002d8 <LCD_Send_Cmd>:
 * @brief Send Command to LCD
 * @param cmd : LCD commands
 * @retval None
 */
void LCD_Send_Cmd(uint8_t cmd)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af02      	add	r7, sp, #8
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (cmd & 0xF0);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	f023 030f 	bic.w	r3, r3, #15
 80002e8:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((cmd << 4) & 0xF0);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN;
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	f043 030c 	orr.w	r3, r3, #12
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT;
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	f043 0308 	orr.w	r3, r3, #8
 8000300:	b2db      	uxtb	r3, r3
 8000302:	737b      	strb	r3, [r7, #13]

	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN;
 8000304:	7bbb      	ldrb	r3, [r7, #14]
 8000306:	f043 030c 	orr.w	r3, r3, #12
 800030a:	b2db      	uxtb	r3, r3
 800030c:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT;
 800030e:	7bbb      	ldrb	r3, [r7, #14]
 8000310:	f043 0308 	orr.w	r3, r3, #8
 8000314:	b2db      	uxtb	r3, r3
 8000316:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000318:	230a      	movs	r3, #10
 800031a:	2201      	movs	r2, #1
 800031c:	214e      	movs	r1, #78	; 0x4e
 800031e:	4815      	ldr	r0, [pc, #84]	; (8000374 <LCD_Send_Cmd+0x9c>)
 8000320:	f000 ff74 	bl	800120c <HAL_I2C_IsDeviceReady>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d108      	bne.n	800033c <LCD_Send_Cmd+0x64>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100);
 800032a:	f107 020c 	add.w	r2, r7, #12
 800032e:	2364      	movs	r3, #100	; 0x64
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2302      	movs	r3, #2
 8000334:	214e      	movs	r1, #78	; 0x4e
 8000336:	480f      	ldr	r0, [pc, #60]	; (8000374 <LCD_Send_Cmd+0x9c>)
 8000338:	f000 fe6a 	bl	8001010 <HAL_I2C_Master_Transmit>

	/*Provide a delay */
	HAL_Delay(5);
 800033c:	2005      	movs	r0, #5
 800033e:	f000 fa53 	bl	80007e8 <HAL_Delay>

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000342:	230a      	movs	r3, #10
 8000344:	2201      	movs	r2, #1
 8000346:	214e      	movs	r1, #78	; 0x4e
 8000348:	480a      	ldr	r0, [pc, #40]	; (8000374 <LCD_Send_Cmd+0x9c>)
 800034a:	f000 ff5f 	bl	800120c <HAL_I2C_IsDeviceReady>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d108      	bne.n	8000366 <LCD_Send_Cmd+0x8e>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);
 8000354:	f107 0208 	add.w	r2, r7, #8
 8000358:	2364      	movs	r3, #100	; 0x64
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2302      	movs	r3, #2
 800035e:	214e      	movs	r1, #78	; 0x4e
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <LCD_Send_Cmd+0x9c>)
 8000362:	f000 fe55 	bl	8001010 <HAL_I2C_Master_Transmit>

	/*Provide a delay */
	HAL_Delay(5);
 8000366:	2005      	movs	r0, #5
 8000368:	f000 fa3e 	bl	80007e8 <HAL_Delay>
}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000028 	.word	0x20000028

08000378 <LCD_Send_Data>:
 * @brief Send Data to LCD
 * @param data: Data to be sent to LCD
 * @retval None
 */
void LCD_Send_Data(uint8_t data)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af02      	add	r7, sp, #8
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (data & 0xF0);
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	f023 030f 	bic.w	r3, r3, #15
 8000388:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((data << 4) & 0xF0);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	011b      	lsls	r3, r3, #4
 800038e:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN|PIN_RS;
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	f043 030d 	orr.w	r3, r3, #13
 8000396:	b2db      	uxtb	r3, r3
 8000398:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT|PIN_RS;
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	f043 0309 	orr.w	r3, r3, #9
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	737b      	strb	r3, [r7, #13]

	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN|PIN_RS;
 80003a4:	7bbb      	ldrb	r3, [r7, #14]
 80003a6:	f043 030d 	orr.w	r3, r3, #13
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT|PIN_RS;
 80003ae:	7bbb      	ldrb	r3, [r7, #14]
 80003b0:	f043 0309 	orr.w	r3, r3, #9
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 80003b8:	230a      	movs	r3, #10
 80003ba:	2201      	movs	r2, #1
 80003bc:	214e      	movs	r1, #78	; 0x4e
 80003be:	4814      	ldr	r0, [pc, #80]	; (8000410 <LCD_Send_Data+0x98>)
 80003c0:	f000 ff24 	bl	800120c <HAL_I2C_IsDeviceReady>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d108      	bne.n	80003dc <LCD_Send_Data+0x64>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100);
 80003ca:	f107 020c 	add.w	r2, r7, #12
 80003ce:	2364      	movs	r3, #100	; 0x64
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2302      	movs	r3, #2
 80003d4:	214e      	movs	r1, #78	; 0x4e
 80003d6:	480e      	ldr	r0, [pc, #56]	; (8000410 <LCD_Send_Data+0x98>)
 80003d8:	f000 fe1a 	bl	8001010 <HAL_I2C_Master_Transmit>

	/*Provide a delay */
	//HAL_Delay(1);

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 80003dc:	230a      	movs	r3, #10
 80003de:	2201      	movs	r2, #1
 80003e0:	214e      	movs	r1, #78	; 0x4e
 80003e2:	480b      	ldr	r0, [pc, #44]	; (8000410 <LCD_Send_Data+0x98>)
 80003e4:	f000 ff12 	bl	800120c <HAL_I2C_IsDeviceReady>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d108      	bne.n	8000400 <LCD_Send_Data+0x88>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);
 80003ee:	f107 0208 	add.w	r2, r7, #8
 80003f2:	2364      	movs	r3, #100	; 0x64
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	2302      	movs	r3, #2
 80003f8:	214e      	movs	r1, #78	; 0x4e
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <LCD_Send_Data+0x98>)
 80003fc:	f000 fe08 	bl	8001010 <HAL_I2C_Master_Transmit>

    /*Provide a delay */
    HAL_Delay(5);
 8000400:	2005      	movs	r0, #5
 8000402:	f000 f9f1 	bl	80007e8 <HAL_Delay>
}
 8000406:	bf00      	nop
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000028 	.word	0x20000028

08000414 <LCD_Init>:
/**
 * @brief  Initializes LCD
 * @retval None
 */
void LCD_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	/* Configure GPIOs */
	GPIO_Config();
 8000418:	f7ff fed6 	bl	80001c8 <GPIO_Config>

	/*Configure I2C */
	I2C_Config();
 800041c:	f7ff ff20 	bl	8000260 <I2C_Config>

	/* Wait for 15ms */
	HAL_Delay(15);
 8000420:	200f      	movs	r0, #15
 8000422:	f000 f9e1 	bl	80007e8 <HAL_Delay>

	/*Function Set - As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET1);
 8000426:	2033      	movs	r0, #51	; 0x33
 8000428:	f7ff ff56 	bl	80002d8 <LCD_Send_Cmd>

	/*Function Set -As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET2);
 800042c:	2032      	movs	r0, #50	; 0x32
 800042e:	f7ff ff53 	bl	80002d8 <LCD_Send_Cmd>

	/*Set 4bit mode and 2 lines */
	LCD_Send_Cmd(LCD_4BIT_2LINE_MODE);
 8000432:	2028      	movs	r0, #40	; 0x28
 8000434:	f7ff ff50 	bl	80002d8 <LCD_Send_Cmd>

	/*Display on, cursor off*/
	LCD_Send_Cmd(0x0C);
 8000438:	200c      	movs	r0, #12
 800043a:	f7ff ff4d 	bl	80002d8 <LCD_Send_Cmd>

	/* SET Row1 and Col1 (1st Line) */
	LCD_Send_Cmd(0x80);
 800043e:	2080      	movs	r0, #128	; 0x80
 8000440:	f7ff ff4a 	bl	80002d8 <LCD_Send_Cmd>

	/*Clear Display*/
	LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
 8000444:	2001      	movs	r0, #1
 8000446:	f7ff ff47 	bl	80002d8 <LCD_Send_Cmd>

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}

0800044e <LCD_Send_String>:
 * @brief Send Strings to LCD
 * @param str: pointer to strings
 * @retval None
 */
void LCD_Send_String(char *str)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
	while (*str)
 8000456:	e006      	b.n	8000466 <LCD_Send_String+0x18>
	{
		LCD_Send_Data(*str++);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff89 	bl	8000378 <LCD_Send_Data>
	while (*str)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1f4      	bne.n	8000458 <LCD_Send_String+0xa>
	}
}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <LCD_Display_Long_Message>:
 * @brief Display long messages of any size on LCD
 * @param str: pointer to strings
 * @retval None
 */
void LCD_Display_Long_Message(char *string)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	int i =0, count =1, j=0;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	2301      	movs	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
	/*Clear display and Set position to Line1 start*/
	LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff ff23 	bl	80002d8 <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_SET_ROW1_COL1);
 8000492:	2080      	movs	r0, #128	; 0x80
 8000494:	f7ff ff20 	bl	80002d8 <LCD_Send_Cmd>

	while(string[i] != '\0')
 8000498:	e033      	b.n	8000502 <LCD_Display_Long_Message+0x8a>
	{
		LCD_Send_Data(string[i]);
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	4413      	add	r3, r2
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff68 	bl	8000378 <LCD_Send_Data>

		/*If we reach 1st Line end, then goto 2nd line start*/
		if(j>=15 && (count%2 == 1))
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b0e      	cmp	r3, #14
 80004ac:	dd0d      	ble.n	80004ca <LCD_Display_Long_Message+0x52>
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	bfb8      	it	lt
 80004b8:	425b      	neglt	r3, r3
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d105      	bne.n	80004ca <LCD_Display_Long_Message+0x52>
		{
			count++;
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	3301      	adds	r3, #1
 80004c2:	613b      	str	r3, [r7, #16]
			LCD_Send_Cmd(LCD_SET_ROW2_COL1);
 80004c4:	20c0      	movs	r0, #192	; 0xc0
 80004c6:	f7ff ff07 	bl	80002d8 <LCD_Send_Cmd>
		}

		/*If we reach second line end, clear display start from line1 again*/
		if(j>=31 && (count%2 == 0))
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2b1e      	cmp	r3, #30
 80004ce:	dd0f      	ble.n	80004f0 <LCD_Display_Long_Message+0x78>
 80004d0:	693b      	ldr	r3, [r7, #16]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d10a      	bne.n	80004f0 <LCD_Display_Long_Message+0x78>
		{
			count++;
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	3301      	adds	r3, #1
 80004de:	613b      	str	r3, [r7, #16]
			j=0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
			LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f7ff fef7 	bl	80002d8 <LCD_Send_Cmd>
			LCD_Send_Cmd(LCD_SET_ROW1_COL1);
 80004ea:	2080      	movs	r0, #128	; 0x80
 80004ec:	f7ff fef4 	bl	80002d8 <LCD_Send_Cmd>
		}

		HAL_Delay(100);
 80004f0:	2064      	movs	r0, #100	; 0x64
 80004f2:	f000 f979 	bl	80007e8 <HAL_Delay>
		i++;
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
		j++;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3301      	adds	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
	while(string[i] != '\0')
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d1c5      	bne.n	800049a <LCD_Display_Long_Message+0x22>
	}
}
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <SysTick_Handler>:



/*Systick Handler*/
void SysTick_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800051c:	f000 f944 	bl	80007a8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000520:	f000 fa88 	bl	8000a34 <HAL_SYSTICK_IRQHandler>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <main>:
#include "stm32f4xx_hal.h"
#include "STM32F407_I2C_LCD16x02_Driver.h"

int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	//HAL Initialise
	HAL_Init();
 800052c:	f000 f8ea 	bl	8000704 <HAL_Init>

   //Initialize LCD
	LCD_Init();
 8000530:	f7ff ff70 	bl	8000414 <LCD_Init>

	LCD_Send_String("Hi I Am From ");
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x30>)
 8000536:	f7ff ff8a 	bl	800044e <LCD_Send_String>
	LCD_Send_Cmd(LCD_SET_ROW2_COL1);
 800053a:	20c0      	movs	r0, #192	; 0xc0
 800053c:	f7ff fecc 	bl	80002d8 <LCD_Send_Cmd>
	LCD_Send_String("     PUNE    ");
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x34>)
 8000542:	f7ff ff84 	bl	800044e <LCD_Send_String>
  HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f000 f94d 	bl	80007e8 <HAL_Delay>
	LCD_Display_Long_Message("My Name Is Prateek Singh :-)");
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <main+0x38>)
 8000550:	f7ff ff92 	bl	8000478 <LCD_Display_Long_Message>
	while(1)
 8000554:	e7fe      	b.n	8000554 <main+0x2c>
 8000556:	bf00      	nop
 8000558:	0800191c 	.word	0x0800191c
 800055c:	0800192c 	.word	0x0800192c
 8000560:	0800193c 	.word	0x0800193c

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <HAL_MspInit+0x4c>)
 8000570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <HAL_MspInit+0x4c>)
 8000574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000578:	6453      	str	r3, [r2, #68]	; 0x44
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <HAL_MspInit+0x4c>)
 800057c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800057e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_MspInit+0x4c>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <HAL_MspInit+0x4c>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	6413      	str	r3, [r2, #64]	; 0x40
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_MspInit+0x4c>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005a2:	2007      	movs	r0, #7
 80005a4:	f000 f9f6 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40023800 	.word	0x40023800

080005b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a19      	ldr	r2, [pc, #100]	; (8000638 <HAL_I2C_MspInit+0x84>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d12b      	bne.n	800062e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_I2C_MspInit+0x88>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <HAL_I2C_MspInit+0x88>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_I2C_MspInit+0x88>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005f2:	23c0      	movs	r3, #192	; 0xc0
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f6:	2312      	movs	r3, #18
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000602:	2304      	movs	r3, #4
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <HAL_I2C_MspInit+0x8c>)
 800060e:	f000 fa1f 	bl	8000a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <HAL_I2C_MspInit+0x88>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <HAL_I2C_MspInit+0x88>)
 800061c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000620:	6413      	str	r3, [r2, #64]	; 0x40
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_I2C_MspInit+0x88>)
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40005400 	.word	0x40005400
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <SystemInit+0x20>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <SystemInit+0x20>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006b6:	490e      	ldr	r1, [pc, #56]	; (80006f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006b8:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006cc:	4c0b      	ldr	r4, [pc, #44]	; (80006fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006da:	f7ff ffd7 	bl	800068c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006de:	f001 f8ed 	bl	80018bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006e2:	f7ff ff21 	bl	8000528 <main>
  bx  lr    
 80006e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f4:	0800196c 	.word	0x0800196c
  ldr r2, =_sbss
 80006f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006fc:	20000080 	.word	0x20000080

08000700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC_IRQHandler>
	...

08000704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_Init+0x40>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <HAL_Init+0x40>)
 800070e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_Init+0x40>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_Init+0x40>)
 800071a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800071e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x40>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x40>)
 8000726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f931 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff ff14 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023c00 	.word	0x40023c00

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f93b 	bl	80009e2 <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f911 	bl	80009aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x20>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_IncTick+0x24>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008
 80007cc:	2000007c 	.word	0x2000007c

080007d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_GetTick+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000007c 	.word	0x2000007c

080007e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f0:	f7ff ffee 	bl	80007d0 <HAL_GetTick>
 80007f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000800:	d005      	beq.n	800080e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_Delay+0x44>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800080e:	bf00      	nop
 8000810:	f7ff ffde 	bl	80007d0 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d8f7      	bhi.n	8000810 <HAL_Delay+0x28>
  {
  }
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008

08000830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	60d3      	str	r3, [r2, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_GetPriorityGrouping+0x18>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	f003 0307 	and.w	r3, r3, #7
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db0a      	blt.n	80008be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	490c      	ldr	r1, [pc, #48]	; (80008e0 <__NVIC_SetPriority+0x4c>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008bc:	e00a      	b.n	80008d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4908      	ldr	r1, [pc, #32]	; (80008e4 <__NVIC_SetPriority+0x50>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	3b04      	subs	r3, #4
 80008cc:	0112      	lsls	r2, r2, #4
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	440b      	add	r3, r1
 80008d2:	761a      	strb	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2b04      	cmp	r3, #4
 8000904:	bf28      	it	cs
 8000906:	2304      	movcs	r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	2b06      	cmp	r3, #6
 8000910:	d902      	bls.n	8000918 <NVIC_EncodePriority+0x30>
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b03      	subs	r3, #3
 8000916:	e000      	b.n	800091a <NVIC_EncodePriority+0x32>
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	401a      	ands	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000930:	f04f 31ff 	mov.w	r1, #4294967295
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	43d9      	mvns	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	4313      	orrs	r3, r2
         );
}
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	; 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000960:	d301      	bcc.n	8000966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2301      	movs	r3, #1
 8000964:	e00f      	b.n	8000986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <SysTick_Config+0x40>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096e:	210f      	movs	r1, #15
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f7ff ff8e 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x40>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff47 	bl	8000830 <__NVIC_SetPriorityGrouping>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009bc:	f7ff ff5c 	bl	8000878 <__NVIC_GetPriorityGrouping>
 80009c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f7ff ff8e 	bl	80008e8 <NVIC_EncodePriority>
 80009cc:	4602      	mov	r2, r0
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff5d 	bl	8000894 <__NVIC_SetPriority>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ffb0 	bl	8000950 <SysTick_Config>
 80009f0:	4603      	mov	r3, r0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d106      	bne.n	8000a18 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000a16:	e005      	b.n	8000a24 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a1e:	f023 0304 	bic.w	r3, r3, #4
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a38:	f000 f802 	bl	8000a40 <HAL_SYSTICK_Callback>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	e16b      	b.n	8000d44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	f040 815a 	bne.w	8000d3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d005      	beq.n	8000aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d130      	bne.n	8000b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	68da      	ldr	r2, [r3, #12]
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ad8:	2201      	movs	r2, #1
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	091b      	lsrs	r3, r3, #4
 8000aee:	f003 0201 	and.w	r2, r3, #1
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d017      	beq.n	8000b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d123      	bne.n	8000b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	08da      	lsrs	r2, r3, #3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3208      	adds	r2, #8
 8000b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	220f      	movs	r2, #15
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	691a      	ldr	r2, [r3, #16]
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	08da      	lsrs	r2, r3, #3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3208      	adds	r2, #8
 8000b8e:	69b9      	ldr	r1, [r7, #24]
 8000b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0203 	and.w	r2, r3, #3
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 80b4 	beq.w	8000d3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b60      	ldr	r3, [pc, #384]	; (8000d5c <HAL_GPIO_Init+0x30c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a5f      	ldr	r2, [pc, #380]	; (8000d5c <HAL_GPIO_Init+0x30c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b5d      	ldr	r3, [pc, #372]	; (8000d5c <HAL_GPIO_Init+0x30c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bf2:	4a5b      	ldr	r2, [pc, #364]	; (8000d60 <HAL_GPIO_Init+0x310>)
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	220f      	movs	r2, #15
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a52      	ldr	r2, [pc, #328]	; (8000d64 <HAL_GPIO_Init+0x314>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d02b      	beq.n	8000c76 <HAL_GPIO_Init+0x226>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a51      	ldr	r2, [pc, #324]	; (8000d68 <HAL_GPIO_Init+0x318>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d025      	beq.n	8000c72 <HAL_GPIO_Init+0x222>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a50      	ldr	r2, [pc, #320]	; (8000d6c <HAL_GPIO_Init+0x31c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d01f      	beq.n	8000c6e <HAL_GPIO_Init+0x21e>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a4f      	ldr	r2, [pc, #316]	; (8000d70 <HAL_GPIO_Init+0x320>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d019      	beq.n	8000c6a <HAL_GPIO_Init+0x21a>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a4e      	ldr	r2, [pc, #312]	; (8000d74 <HAL_GPIO_Init+0x324>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d013      	beq.n	8000c66 <HAL_GPIO_Init+0x216>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a4d      	ldr	r2, [pc, #308]	; (8000d78 <HAL_GPIO_Init+0x328>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d00d      	beq.n	8000c62 <HAL_GPIO_Init+0x212>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a4c      	ldr	r2, [pc, #304]	; (8000d7c <HAL_GPIO_Init+0x32c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d007      	beq.n	8000c5e <HAL_GPIO_Init+0x20e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a4b      	ldr	r2, [pc, #300]	; (8000d80 <HAL_GPIO_Init+0x330>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_GPIO_Init+0x20a>
 8000c56:	2307      	movs	r3, #7
 8000c58:	e00e      	b.n	8000c78 <HAL_GPIO_Init+0x228>
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	e00c      	b.n	8000c78 <HAL_GPIO_Init+0x228>
 8000c5e:	2306      	movs	r3, #6
 8000c60:	e00a      	b.n	8000c78 <HAL_GPIO_Init+0x228>
 8000c62:	2305      	movs	r3, #5
 8000c64:	e008      	b.n	8000c78 <HAL_GPIO_Init+0x228>
 8000c66:	2304      	movs	r3, #4
 8000c68:	e006      	b.n	8000c78 <HAL_GPIO_Init+0x228>
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e004      	b.n	8000c78 <HAL_GPIO_Init+0x228>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e002      	b.n	8000c78 <HAL_GPIO_Init+0x228>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <HAL_GPIO_Init+0x228>
 8000c76:	2300      	movs	r3, #0
 8000c78:	69fa      	ldr	r2, [r7, #28]
 8000c7a:	f002 0203 	and.w	r2, r2, #3
 8000c7e:	0092      	lsls	r2, r2, #2
 8000c80:	4093      	lsls	r3, r2
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c88:	4935      	ldr	r1, [pc, #212]	; (8000d60 <HAL_GPIO_Init+0x310>)
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c96:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <HAL_GPIO_Init+0x334>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cba:	4a32      	ldr	r2, [pc, #200]	; (8000d84 <HAL_GPIO_Init+0x334>)
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cc0:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <HAL_GPIO_Init+0x334>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ce4:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <HAL_GPIO_Init+0x334>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <HAL_GPIO_Init+0x334>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <HAL_GPIO_Init+0x334>)
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_GPIO_Init+0x334>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d38:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_GPIO_Init+0x334>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3301      	adds	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	2b0f      	cmp	r3, #15
 8000d48:	f67f ae90 	bls.w	8000a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40013800 	.word	0x40013800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40021400 	.word	0x40021400
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	40021c00 	.word	0x40021c00
 8000d84:	40013c00 	.word	0x40013c00

08000d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e12b      	b.n	8000ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fc00 	bl	80005b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2224      	movs	r2, #36	; 0x24
 8000db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0201 	bic.w	r2, r2, #1
 8000dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000dec:	f000 fd52 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8000df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4a81      	ldr	r2, [pc, #516]	; (8000ffc <HAL_I2C_Init+0x274>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d807      	bhi.n	8000e0c <HAL_I2C_Init+0x84>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4a80      	ldr	r2, [pc, #512]	; (8001000 <HAL_I2C_Init+0x278>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	bf94      	ite	ls
 8000e04:	2301      	movls	r3, #1
 8000e06:	2300      	movhi	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	e006      	b.n	8000e1a <HAL_I2C_Init+0x92>
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4a7d      	ldr	r2, [pc, #500]	; (8001004 <HAL_I2C_Init+0x27c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	bf94      	ite	ls
 8000e14:	2301      	movls	r3, #1
 8000e16:	2300      	movhi	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e0e7      	b.n	8000ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4a78      	ldr	r2, [pc, #480]	; (8001008 <HAL_I2C_Init+0x280>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0c9b      	lsrs	r3, r3, #18
 8000e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	4a6a      	ldr	r2, [pc, #424]	; (8000ffc <HAL_I2C_Init+0x274>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d802      	bhi.n	8000e5c <HAL_I2C_Init+0xd4>
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	e009      	b.n	8000e70 <HAL_I2C_Init+0xe8>
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e62:	fb02 f303 	mul.w	r3, r2, r3
 8000e66:	4a69      	ldr	r2, [pc, #420]	; (800100c <HAL_I2C_Init+0x284>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	099b      	lsrs	r3, r3, #6
 8000e6e:	3301      	adds	r3, #1
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	430b      	orrs	r3, r1
 8000e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	495c      	ldr	r1, [pc, #368]	; (8000ffc <HAL_I2C_Init+0x274>)
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d819      	bhi.n	8000ec4 <HAL_I2C_Init+0x13c>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1e59      	subs	r1, r3, #1
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e9e:	1c59      	adds	r1, r3, #1
 8000ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ea4:	400b      	ands	r3, r1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <HAL_I2C_Init+0x138>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	1e59      	subs	r1, r3, #1
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ebe:	e051      	b.n	8000f64 <HAL_I2C_Init+0x1dc>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e04f      	b.n	8000f64 <HAL_I2C_Init+0x1dc>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d111      	bne.n	8000ef0 <HAL_I2C_Init+0x168>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1e58      	subs	r0, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6859      	ldr	r1, [r3, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	440b      	add	r3, r1
 8000eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	e012      	b.n	8000f16 <HAL_I2C_Init+0x18e>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	1e58      	subs	r0, r3, #1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6859      	ldr	r1, [r3, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	0099      	lsls	r1, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf0c      	ite	eq
 8000f10:	2301      	moveq	r3, #1
 8000f12:	2300      	movne	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_I2C_Init+0x196>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e022      	b.n	8000f64 <HAL_I2C_Init+0x1dc>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10e      	bne.n	8000f44 <HAL_I2C_Init+0x1bc>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1e58      	subs	r0, r3, #1
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6859      	ldr	r1, [r3, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	440b      	add	r3, r1
 8000f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f42:	e00f      	b.n	8000f64 <HAL_I2C_Init+0x1dc>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1e58      	subs	r0, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6859      	ldr	r1, [r3, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	0099      	lsls	r1, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	6809      	ldr	r1, [r1, #0]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69da      	ldr	r2, [r3, #28]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6911      	ldr	r1, [r2, #16]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68d2      	ldr	r2, [r2, #12]
 8000f9e:	4311      	orrs	r1, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2220      	movs	r2, #32
 8000fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	000186a0 	.word	0x000186a0
 8001000:	001e847f 	.word	0x001e847f
 8001004:	003d08ff 	.word	0x003d08ff
 8001008:	431bde83 	.word	0x431bde83
 800100c:	10624dd3 	.word	0x10624dd3

08001010 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af02      	add	r7, sp, #8
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	461a      	mov	r2, r3
 800101c:	460b      	mov	r3, r1
 800101e:	817b      	strh	r3, [r7, #10]
 8001020:	4613      	mov	r3, r2
 8001022:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff fbd4 	bl	80007d0 <HAL_GetTick>
 8001028:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b20      	cmp	r3, #32
 8001034:	f040 80e0 	bne.w	80011f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2319      	movs	r3, #25
 800103e:	2201      	movs	r2, #1
 8001040:	4970      	ldr	r1, [pc, #448]	; (8001204 <HAL_I2C_Master_Transmit+0x1f4>)
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 fa92 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800104e:	2302      	movs	r3, #2
 8001050:	e0d3      	b.n	80011fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_I2C_Master_Transmit+0x50>
 800105c:	2302      	movs	r3, #2
 800105e:	e0cc      	b.n	80011fa <HAL_I2C_Master_Transmit+0x1ea>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b01      	cmp	r3, #1
 8001074:	d007      	beq.n	8001086 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0201 	orr.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001094:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2221      	movs	r2, #33	; 0x21
 800109a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2210      	movs	r2, #16
 80010a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	893a      	ldrh	r2, [r7, #8]
 80010b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4a50      	ldr	r2, [pc, #320]	; (8001208 <HAL_I2C_Master_Transmit+0x1f8>)
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80010c8:	8979      	ldrh	r1, [r7, #10]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	6a3a      	ldr	r2, [r7, #32]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f9ca 	bl	8001468 <I2C_MasterRequestWrite>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e08d      	b.n	80011fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80010f4:	e066      	b.n	80011c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	6a39      	ldr	r1, [r7, #32]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 fb0c 	bl	8001718 <I2C_WaitOnTXEFlagUntilTimeout>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00d      	beq.n	8001122 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2b04      	cmp	r3, #4
 800110c:	d107      	bne.n	800111e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800111c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e06b      	b.n	80011fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113c:	b29b      	uxth	r3, r3
 800113e:	3b01      	subs	r3, #1
 8001140:	b29a      	uxth	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800114a:	3b01      	subs	r3, #1
 800114c:	b29a      	uxth	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d11b      	bne.n	8001198 <HAL_I2C_Master_Transmit+0x188>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001164:	2b00      	cmp	r3, #0
 8001166:	d017      	beq.n	8001198 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001190:	3b01      	subs	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	6a39      	ldr	r1, [r7, #32]
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f000 fafc 	bl	800179a <I2C_WaitOnBTFFlagUntilTimeout>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00d      	beq.n	80011c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d107      	bne.n	80011c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e01a      	b.n	80011fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d194      	bne.n	80010f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2220      	movs	r2, #32
 80011e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80011f8:	2302      	movs	r3, #2
  }
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	00100002 	.word	0x00100002
 8001208:	ffff0000 	.word	0xffff0000

0800120c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af02      	add	r7, sp, #8
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	460b      	mov	r3, r1
 800121a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff fad8 	bl	80007d0 <HAL_GetTick>
 8001220:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b20      	cmp	r3, #32
 8001230:	f040 8111 	bne.w	8001456 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2319      	movs	r3, #25
 800123a:	2201      	movs	r2, #1
 800123c:	4988      	ldr	r1, [pc, #544]	; (8001460 <HAL_I2C_IsDeviceReady+0x254>)
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 f994 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800124a:	2302      	movs	r3, #2
 800124c:	e104      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_I2C_IsDeviceReady+0x50>
 8001258:	2302      	movs	r3, #2
 800125a:	e0fd      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x24c>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b01      	cmp	r3, #1
 8001270:	d007      	beq.n	8001282 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0201 	orr.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001290:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2224      	movs	r2, #36	; 0x24
 8001296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4a70      	ldr	r2, [pc, #448]	; (8001464 <HAL_I2C_IsDeviceReady+0x258>)
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 f952 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00d      	beq.n	80012ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012dc:	d103      	bne.n	80012e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e0b6      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80012ea:	897b      	ldrh	r3, [r7, #10]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80012f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fa69 	bl	80007d0 <HAL_GetTick>
 80012fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b02      	cmp	r3, #2
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001324:	bf0c      	ite	eq
 8001326:	2301      	moveq	r3, #1
 8001328:	2300      	movne	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800132e:	e025      	b.n	800137c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001330:	f7ff fa4e 	bl	80007d0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d302      	bcc.n	8001346 <HAL_I2C_IsDeviceReady+0x13a>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d103      	bne.n	800134e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	22a0      	movs	r2, #160	; 0xa0
 800134a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b02      	cmp	r3, #2
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001372:	bf0c      	ite	eq
 8001374:	2301      	moveq	r3, #1
 8001376:	2300      	movne	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2ba0      	cmp	r3, #160	; 0xa0
 8001386:	d005      	beq.n	8001394 <HAL_I2C_IsDeviceReady+0x188>
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_I2C_IsDeviceReady+0x188>
 800138e:	7dbb      	ldrb	r3, [r7, #22]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0cd      	beq.n	8001330 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2220      	movs	r2, #32
 8001398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d129      	bne.n	80013fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2319      	movs	r3, #25
 80013d6:	2201      	movs	r2, #1
 80013d8:	4921      	ldr	r1, [pc, #132]	; (8001460 <HAL_I2C_IsDeviceReady+0x254>)
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f8c6 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e036      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2220      	movs	r2, #32
 80013ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e02c      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800140c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001416:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2319      	movs	r3, #25
 800141e:	2201      	movs	r2, #1
 8001420:	490f      	ldr	r1, [pc, #60]	; (8001460 <HAL_I2C_IsDeviceReady+0x254>)
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 f8a2 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e012      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	3301      	adds	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	f4ff af32 	bcc.w	80012a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2220      	movs	r2, #32
 8001446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001456:	2302      	movs	r3, #2
  }
}
 8001458:	4618      	mov	r0, r3
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	00100002 	.word	0x00100002
 8001464:	ffff0000 	.word	0xffff0000

08001468 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	460b      	mov	r3, r1
 8001476:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d006      	beq.n	8001492 <I2C_MasterRequestWrite+0x2a>
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d003      	beq.n	8001492 <I2C_MasterRequestWrite+0x2a>
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001490:	d108      	bne.n	80014a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e00b      	b.n	80014bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	2b12      	cmp	r3, #18
 80014aa:	d107      	bne.n	80014bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f84f 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00d      	beq.n	80014f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e2:	d103      	bne.n	80014ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e035      	b.n	800155c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014f8:	d108      	bne.n	800150c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	e01b      	b.n	8001544 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800150c:	897b      	ldrh	r3, [r7, #10]
 800150e:	11db      	asrs	r3, r3, #7
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f003 0306 	and.w	r3, r3, #6
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f063 030f 	orn	r3, r3, #15
 800151c:	b2da      	uxtb	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	490e      	ldr	r1, [pc, #56]	; (8001564 <I2C_MasterRequestWrite+0xfc>)
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f875 	bl	800161a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e010      	b.n	800155c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800153a:	897b      	ldrh	r3, [r7, #10]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4907      	ldr	r1, [pc, #28]	; (8001568 <I2C_MasterRequestWrite+0x100>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f865 	bl	800161a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	00010008 	.word	0x00010008
 8001568:	00010002 	.word	0x00010002

0800156c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800157c:	e025      	b.n	80015ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d021      	beq.n	80015ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001586:	f7ff f923 	bl	80007d0 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d302      	bcc.n	800159c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d116      	bne.n	80015ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2220      	movs	r2, #32
 80015a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f043 0220 	orr.w	r2, r3, #32
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e023      	b.n	8001612 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10d      	bne.n	80015f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4013      	ands	r3, r2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf0c      	ite	eq
 80015e6:	2301      	moveq	r3, #1
 80015e8:	2300      	movne	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	e00c      	b.n	800160a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4013      	ands	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	429a      	cmp	r2, r3
 800160e:	d0b6      	beq.n	800157e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001628:	e051      	b.n	80016ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001638:	d123      	bne.n	8001682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001648:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001652:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2220      	movs	r2, #32
 800165e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f043 0204 	orr.w	r2, r3, #4
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e046      	b.n	8001710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d021      	beq.n	80016ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168a:	f7ff f8a1 	bl	80007d0 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	d302      	bcc.n	80016a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d116      	bne.n	80016ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f043 0220 	orr.w	r2, r3, #32
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e020      	b.n	8001710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	0c1b      	lsrs	r3, r3, #16
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10c      	bne.n	80016f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4013      	ands	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bf14      	ite	ne
 80016ea:	2301      	movne	r3, #1
 80016ec:	2300      	moveq	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	e00b      	b.n	800170a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	43da      	mvns	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	4013      	ands	r3, r2
 80016fe:	b29b      	uxth	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d18d      	bne.n	800162a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001724:	e02d      	b.n	8001782 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 f878 	bl	800181c <I2C_IsAcknowledgeFailed>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e02d      	b.n	8001792 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d021      	beq.n	8001782 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800173e:	f7ff f847 	bl	80007d0 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	429a      	cmp	r2, r3
 800174c:	d302      	bcc.n	8001754 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d116      	bne.n	8001782 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f043 0220 	orr.w	r2, r3, #32
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e007      	b.n	8001792 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178c:	2b80      	cmp	r3, #128	; 0x80
 800178e:	d1ca      	bne.n	8001726 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017a6:	e02d      	b.n	8001804 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f837 	bl	800181c <I2C_IsAcknowledgeFailed>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e02d      	b.n	8001814 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017be:	d021      	beq.n	8001804 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c0:	f7ff f806 	bl	80007d0 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d302      	bcc.n	80017d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d116      	bne.n	8001804 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f043 0220 	orr.w	r2, r3, #32
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e007      	b.n	8001814 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b04      	cmp	r3, #4
 8001810:	d1ca      	bne.n	80017a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001832:	d11b      	bne.n	800186c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800183c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2220      	movs	r2, #32
 8001848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f043 0204 	orr.w	r2, r3, #4
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <HAL_RCC_GetHCLKFreq+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000

08001894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001898:	f7ff fff0 	bl	800187c <HAL_RCC_GetHCLKFreq>
 800189c:	4602      	mov	r2, r0
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	0a9b      	lsrs	r3, r3, #10
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	4903      	ldr	r1, [pc, #12]	; (80018b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018aa:	5ccb      	ldrb	r3, [r1, r3]
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	0800195c 	.word	0x0800195c

080018bc <__libc_init_array>:
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	4d0d      	ldr	r5, [pc, #52]	; (80018f4 <__libc_init_array+0x38>)
 80018c0:	4c0d      	ldr	r4, [pc, #52]	; (80018f8 <__libc_init_array+0x3c>)
 80018c2:	1b64      	subs	r4, r4, r5
 80018c4:	10a4      	asrs	r4, r4, #2
 80018c6:	2600      	movs	r6, #0
 80018c8:	42a6      	cmp	r6, r4
 80018ca:	d109      	bne.n	80018e0 <__libc_init_array+0x24>
 80018cc:	4d0b      	ldr	r5, [pc, #44]	; (80018fc <__libc_init_array+0x40>)
 80018ce:	4c0c      	ldr	r4, [pc, #48]	; (8001900 <__libc_init_array+0x44>)
 80018d0:	f000 f818 	bl	8001904 <_init>
 80018d4:	1b64      	subs	r4, r4, r5
 80018d6:	10a4      	asrs	r4, r4, #2
 80018d8:	2600      	movs	r6, #0
 80018da:	42a6      	cmp	r6, r4
 80018dc:	d105      	bne.n	80018ea <__libc_init_array+0x2e>
 80018de:	bd70      	pop	{r4, r5, r6, pc}
 80018e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e4:	4798      	blx	r3
 80018e6:	3601      	adds	r6, #1
 80018e8:	e7ee      	b.n	80018c8 <__libc_init_array+0xc>
 80018ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ee:	4798      	blx	r3
 80018f0:	3601      	adds	r6, #1
 80018f2:	e7f2      	b.n	80018da <__libc_init_array+0x1e>
 80018f4:	08001964 	.word	0x08001964
 80018f8:	08001964 	.word	0x08001964
 80018fc:	08001964 	.word	0x08001964
 8001900:	08001968 	.word	0x08001968

08001904 <_init>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	bf00      	nop
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr

08001910 <_fini>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr
